@@include@@variables.include

APT_GET="`which apt-get 2> /dev/null`"
APT_CONFIG="`which apt-config 2> /dev/null`"

SOURCES_PREAMBLE="### THIS FILE IS AUTOMATICALLY CONFIGURED ###
# You may comment out this entry, but any other modifications may be lost.\n"

# Install the repository/package signing keys, if they aren't already.
# (see also: https://www.google.com/linuxrepositories/)
install_key() {
  APT_KEY="`which apt-key 2> /dev/null`"
  if [ ! -x "$APT_KEY" ]; then
    return
  fi

  NEED_KEYS=0

  # 2017 signing subkey
  "$APT_KEY" export 997C215E 2>&1 | \
    grep -q -- "-----BEGIN PGP PUBLIC KEY BLOCK-----"
  if [ $? -ne 0 ]; then
    NEED_KEYS=1
  fi

  # 2019 signing subkey
  "$APT_KEY" export 3CB3BD13 2>&1 | \
    grep -q -- "-----BEGIN PGP PUBLIC KEY BLOCK-----"
  if [ $? -ne 0 ]; then
    NEED_KEYS=1
  fi

  if [ $NEED_KEYS -eq 1 ]; then
    "$APT_KEY" add - >/dev/null 2>&1 <<KEYDATA
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
9NA68aAk0HQD9iRG
=L+YR
-----END PGP PUBLIC KEY BLOCK-----
KEYDATA
  fi
}

# Set variables for the locations of the apt sources lists.
find_apt_sources() {
  eval $("$APT_CONFIG" shell APT_SOURCESDIR 'Dir::Etc::sourceparts/d')
}

# Update the Google repository if it's not set correctly.
# Note: this doesn't necessarily enable the repository, it just makes sure the
# correct settings are available in the sources list.
# Returns:
# 0 - no update necessary
# 2 - error
update_bad_sources() {
  if [ ! "$REPOCONFIG" ]; then
    return 0
  fi

  find_apt_sources

  SOURCELIST="$APT_SOURCESDIR/@@PACKAGE@@.list"
  # Don't do anything if the file isn't there, since that probably means the
  # user disabled it.
  if [ ! -r "$SOURCELIST" ]; then
    return 0
  fi

  # Basic check for active configurations (non-blank, non-comment lines).
  ACTIVECONFIGS=$(grep -v "^[[:space:]]*\(#.*\)\?$" "$SOURCELIST" 2>/dev/null)

  # Check if the correct repository configuration is in there.
  REPOMATCH=$(grep -E "^[[:space:]#]*\b$REPOCONFIGREGEX\b" "$SOURCELIST" \
    2>/dev/null)

  # Check if the correct repository is disabled.
  MATCH_DISABLED=$(echo "$REPOMATCH" | grep "^[[:space:]]*#" 2>/dev/null)

  # Now figure out if we need to fix things.
  BADCONFIG=1
  if [ "$REPOMATCH" ]; then
    # If it's there and active, that's ideal, so nothing to do.
    if [ ! "$MATCH_DISABLED" ]; then
      BADCONFIG=0
    else
      # If it's not active, but neither is anything else, that's fine too.
      if [ ! "$ACTIVECONFIGS" ]; then
        BADCONFIG=0
      fi
    fi
  fi

  if [ $BADCONFIG -eq 0 ]; then
    return 0
  fi

  # At this point, either the correct configuration is completely missing, or
  # the wrong configuration is active. In that case, just abandon the mess and
  # recreate the file with the correct configuration. If there were no active
  # configurations before, create the new configuration disabled.
  DISABLE=""
  if [ ! "$ACTIVECONFIGS" ]; then
    DISABLE="#"
  fi
  printf "$SOURCES_PREAMBLE" > "$SOURCELIST"
  printf "$DISABLE$REPOCONFIG\n" >> "$SOURCELIST"
  if [ $? -eq 0 ]; then
    return 0
  fi
  return 2
}

# Add the Google repository to the apt sources.
# Returns:
# 0 - sources list was created
# 2 - error
create_sources_lists() {
  if [ ! "$REPOCONFIG" ]; then
    return 0
  fi

  find_apt_sources

  SOURCELIST="$APT_SOURCESDIR/@@PACKAGE@@.list"
  if [ -d "$APT_SOURCESDIR" ]; then
    printf "$SOURCES_PREAMBLE" > "$SOURCELIST"
    printf "$REPOCONFIG\n" >> "$SOURCELIST"
    if [ $? -eq 0 ]; then
      return 0
    fi
  fi
  return 2
}

# Remove our custom sources list file.
# Returns:
# 0 - successfully removed, or not configured
# !0 - failed to remove
clean_sources_lists() {
  if [ ! "$REPOCONFIG" ]; then
    return 0
  fi

  find_apt_sources

  rm -f "$APT_SOURCESDIR/@@PACKAGE@@.list" \
        "$APT_SOURCESDIR/@@PACKAGE@@-@@CHANNEL@@.list"
}

# Detect if the repo config was disabled by distro upgrade and enable if
# necessary.
handle_distro_upgrade() {
  if [ ! "$REPOCONFIG" ]; then
    return 0
  fi

  find_apt_sources
  SOURCELIST="$APT_SOURCESDIR/@@PACKAGE@@.list"
  if [ -r "$SOURCELIST" ]; then
    REPOLINE=$(grep -E "^[[:space:]]*#[[:space:]]*$REPOCONFIGREGEX[[:space:]]*# disabled on upgrade to .*" "$SOURCELIST")
    if [ $? -eq 0 ]; then
      sed -i -e "s,^[[:space:]]*#[[:space:]]*\(.*\)[[:space:]]*# disabled on upgrade to .*,\1," \
        "$SOURCELIST"
      LOGGER=$(which logger 2> /dev/null)
      if [ "$LOGGER" ]; then
        "$LOGGER" -t "$0" "Reverted repository modification: $REPOLINE."
      fi
    fi
  fi
}

DEFAULT_ARCH="@@ARCHITECTURE@@"

get_lib_dir() {
  if [ "$DEFAULT_ARCH" = "i386" ]; then
    LIBDIR=lib/i386-linux-gnu
  elif [ "$DEFAULT_ARCH" = "amd64" ]; then
    LIBDIR=lib/x86_64-linux-gnu
  elif [ "$DEFAULT_ARCH" = "armhf" ]; then
    LIBDIR=lib/arm-linux-gnueabihf
  elif [ "$DEFAULT_ARCH" = "arm64" ]; then
    LIBDIR=lib/aarch64-linux-gnu
  elif [ "$DEFAULT_ARCH" = "mipsel" ]; then
    LIBDIR=lib/mipsel-linux-gnu
  elif [ "$DEFAULT_ARCH" = "mips64el" ]; then
    LIBDIR=lib/mips64el-linux-gnuabi64
  else
    echo Unknown CPU Architecture: "$DEFAULT_ARCH"
    exit 1
  fi
}
